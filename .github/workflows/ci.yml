name: ci
on:
  push:
    branches:
      - main
    tags:
      - v[0-9]+.[0-9]+.[0-9]+
  pull_request:
    branches:
      - main
jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
      - name: Set up GraalVM
        uses: DeLaGuardo/setup-graalvm@3.1
        with:
          graalvm-version: 21.1.0.java16
      - name: Install Native Image
        run: gu install native-image
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: mvn-${{hashFiles('pom.xml')}}
          restore-keys: |
            mvn-
      - name: Build
        run: ./mvnw --batch-mode verify
      - name: Upload code coverage
        uses: codecov/codecov-action@v1
      - name: Upload native-image configuration files
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v2
        with:
          name: native-image-configuration
          path: target/classes/META-INF/native-image
  assemble_non_windows_distributions:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-20.04
            target: linux
          - os: macos-10.15
            target: osx
    name: ${{ matrix.target }} distribution
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
      - name: Download native-image configuration files
        uses: actions/download-artifact@v2
        with:
          name: native-image-configuration
      - name: Set up GraalVM
        uses: DeLaGuardo/setup-graalvm@3.1
        with:
          graalvm-version: 21.1.0.java16
      - name: Install Native Image
        run: gu install native-image
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: mvn-${{ hashFiles('pom.xml') }}
          restore-keys: |
            mvn-
      - name: Extract version from tag name
        id: extract_version
        uses: battila7/get-version-action@v2
      - name: Build
        run: |
          ./mvnw --batch-mode --activate-profiles assemble_windows_distribution -Drevision=${{ steps.extract_version.outputs.version-without-v }} verify
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: connect-offset-reset-${{ steps.extract_version.outputs.version-without-v }}-${{ matrix.target }}-x86_64.zip
          path: target/connect-offset-reset-*.zip
  assemble_windows_distribution:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: windows-2019
    name: windows distribution
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
      - name: Download native-image configuration files
        uses: actions/download-artifact@v2
        with:
          name: native-image-configuration
      - name: Set up GraalVM
        uses: DeLaGuardo/setup-graalvm@3.1
        with:
          graalvm-version: 21.1.0.java16
      - name: Install Native Image
        run: gu install native-image
        shell: cmd
      - name: Install Visual C++ build tools workload for Visual Studio 2017 Build Tools
        run: choco install visualstudio2017-workload-vctools
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: mvn-${{ hashFiles('pom.xml') }}
          restore-keys: |
            mvn-
      - name: Extract version from tag name
        id: extract_version
        uses: battila7/get-version-action@v2
      - name: Build
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2017\BuildTools\VC\Auxiliary\Build\vcvars64.bat"
          ./mvnw --batch-mode --activate-profiles assemble -Drevision=${{ steps.extract_version.outputs.version-without-v }} verify
        shell: cmd
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: connect-offset-reset-${{ steps.extract_version.outputs.version-without-v }}-windows-x86_64.zip
          path: target/connect-offset-reset-*.zip
  release:
    needs:
      - assemble_non_windows_distributions
      - assemble_windows_distribution
    runs-on: ubuntu-20.04
